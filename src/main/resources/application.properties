spring.datasource.url=jdbc:postgresql://ep-broad-heart-a2v7pr2f-pooler.eu-central-1.aws.neon.tech:5432/neondb
spring.datasource.username=neondb_owner
spring.datasource.password=npg_M1HBdo3TmapX

# Required for Neon
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Prevent modifications
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl



# Set a maximum lifetime for connections that is less than your database's timeout.
# A good starting point is 30 minutes (1800000 milliseconds).
spring.datasource.hikari.max-lifetime=1800000

# This is the maximum amount of time a connection is allowed to sit idle in the pool.
# It should be less than the max-lifetime. A good value is 10 minutes (600000 milliseconds).
spring.datasource.hikari.idle-timeout=600000

# The maximum time (in milliseconds) that a client will wait for a connection from the pool.
# If this time is exceeded without a connection becoming available, an exception will be thrown.
# A reasonable value is 30 seconds (30000 milliseconds).
spring.datasource.hikari.connection-timeout=30000



#spring.ai.openai.api-key=AIzaSyCClLdQPKORUGS0OhC5F_s0D09phxaig7s
#google.api.key=AIzaSyCClLdQPKORUGS0OhC5F_s0D09phxaig7s


# These properties configure the schema generation
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=schema.sql